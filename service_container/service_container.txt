https://readouble.com/laravel/9https://readouble.com/laravel/9.x/ja/container.html


🟡サービスコンテナ
クラス間の依存（結合）を管理する強力な管理ツール
⇒コンテナにクラスやサービスを登録すると、依存性注入による依存性の解決を自動的に行える



🔵サービスコンテナへの登録
bind、singleton、instance、when
これらのメソッドを使用して登録する。

https://readouble.com/laravel/9https://readouble.com/laravel/9.x/ja/container.html
結合



🔵活用方法：インターフェイスと実装クラスの結合

インターフェース：具体的な実装がない
実装クラス：インターフェースの具体的な実装を定義しているクラス

①サービスコンテナにバインド
$this->app->bind(
    'App\Contracts\EventPusher',
    'App\Services\RedisEventPusher'
);

App\Contracts\EventPusherというインターフェイスを、App\Services\RedisEventPusherというクラスにバインドしている。
⇒サービスコンテナは EventPusherインターフェイスが必要な場合、自動的にRedisEventPusherクラスを提供する。

②コンストラクタのタイプヒント:
use App\Contracts\EventPusher;

public function __construct(EventPusher $pusher)
{
    $this->pusher = $pusher;
}

RedisEventPusherクラスを使用したいクラスのコンストラクタで、
EventPusherインターフェイスをタイプヒントする。
⇒サービスコンテナは、このクラスをインスタンス化するときに、
コンストラクタの引数として EventPusherインターフェイスに結びつけられた具体的なクラス（RedisEventPusher）を自動的に注入する。
⇒このクラスがEventPusherインターフェイスに依存していたとしても、RedisEventPusherクラスとは疎結合になる。
⇒RedisEventPusherクラスの変更がこのクラスには影響しない。



🔵コンテキストによる結合（使用するクラスごとに、異なるクラスや値同士を結合する）

ー　whenメソッドを利用
特定のクラスが依存解決を行う際に、その依存性を指定したクラスや値に結びつける。

例）PhotoControllerと、VideoController・UploadControllerは同じインターフェースを使用するが、
　　その実装の中身は別のものにしたい。

$this->app->when(PhotoController::class)　　PhotoControllerが
          ->needs(Filesystem::class)　　Filesystemインターフェースに依存しているとき
          ->give(function () {
              return Storage::disk('local');　　このファイルシステムを返す
          });

$this->app->when([VideoController::class, UploadController::class])
          ->needs(Filesystem::class)
          ->give(function () {
              return Storage::disk('s3');
          });

Filesystemインターフェイスの具体的な実装をgiveメソッドのクロージャーで定義している。

PhotoControllerクラスがFilesystemインターフェースへの依存性を持っていて、その依存性を解決するときにgiveメソッドが定義されている場合、
giveメソッド内のクロージャーが呼び出され、Storage::disk('local')がFilesystemインターフェースの依存性として注入される。
⇒Filesystemインターフェースの返り値がStorage::disk('local')になる？



🔵複数のクラスの結合をまとめて解決する
タグを付けた複数のクラスのインスタンスをまとめて取得できる...タグ付け
⇒呼び出し側はタグ付けされたクラスの具体的な内容は知らなく良い（疎結合になる）

$this->app->tag(['Class1', 'Class2'], 'tag_name');


例）ReportAggregatorは、SpeedReportとMemoryReportを含むコレクションを引数に持つとする。

// SpeedReport サービスの実装
$this->app->bind('SpeedReport', function () {
    return new SpeedReport();
});

// MemoryReport サービスの実装
$this->app->bind('MemoryReport', function () {
    return new MemoryReport();
});

// reports タグを付ける
$this->app->tag(['SpeedReport', 'MemoryReport'], 'reports');

// ReportAggregator サービスの実装
$this->app->bind('ReportAggregator', function ($app) {
    return new ReportAggregator($app->tagged('reports'));　　タグ付けしたクラスのインスタンスをまとめて取得できる = 疎結合
});

// ReportAggregator インスタンスの取得
$reportAggregator = $this->app->make('ReportAggregator');


※タグを使用しなかった場合
// ReportAggregator サービスの実装（各レポートサービスを直接注入）
$this->app->bind('ReportAggregator', function ($app) {
    $speedReport = $app->make('SpeedReport');
    $memoryReport = $app->make('MemoryReport');
    
    return new ReportAggregator($speedReport, $memoryReport);  引数にクラスを列挙 = 結合が強い
});



🔵結合の変更
extendメソッド：サービスコンテナが特定のサービスを解決するときに、その結果を修正できるメソッド

$this->app->extend(Service::class, function ($service, $app) {
    return new DecoratedService($service);
});

Serviceというサービスが解決されるたびに、そのサービスをデコレートしたDecoratedServiceのインスタンスを返す。
⇒既存のサービスに対して追加の機能や修正を行うことができる。
⇒サービスを動的に調整するための手段として有用。



🔵依存解決するメソッド
詳細はガイド参照

make
resolve：$app変数へアクセスできない場所で依存解決したい場合に使えるグローバルなresolveヘルパ
makeWith：依存しているクラスの引数が、クラス以外（プリミティブ型）を含むときに使用



🔵コンテナイベント
コンテナはオブジェクトの依存解決時に毎回イベントを発行する

resolving：イベントを購読できる



🔵サービスコンテナのインスタンスに使用できるメソッド
PSR-11インターフェイスを持っている。
⇒PSR-11コンテナインターフェイスをタイプヒントで指定することで、サービスコンテナのインスタンスを取得できる。

use Psr\Container\ContainerInterface;

Route::get('/', function (ContainerInterface $container) {
    $service = $container->get('Service');　　$containerにサービスコンテナのインスタンスが入る
    //
});

ー　どんなときに使用するか
サービスを取得したときのエラーハンドリングなど

例）
Route::get('/', function (ContainerInterface $container) {
    try {
        $service = $container->get('Service');　　Serviceに関連付けられたサービスを取得
        //
    } catch (Psr\Container\NotFoundExceptionInterface $e) {
        // サービスが見つからない場合の処理
    } catch (Psr\Container\ContainerExceptionInterface $e) {
        // 依存解決ができない場合の処理
    }
});
