https://readouble.com/laravel/9.x/ja/facades.html



🟡facade（ファサード：入り口）
サービスコンテナに登録したクラスへ「静的」なインターフェイスを提供する
⇒サービスコンテナ下のクラスで、インスタンスを取得しなくても、そのクラスのメソッドを呼び出せるようになる

use SomeNamespace\SomeClass;

// ファサードを使ってメソッドを呼び出す
SomeClass::someMethod();

一見、SomeClassの静的メソッドを呼び出しているようにしているが、
実際はサービスコンテナ内で、SomeClassに結合されたクラスのインスタンスが解決されて、
そのインスタンスに対してsomeMethod(動的メソッド)が呼ばれている。



🔵facade一覧
ガイド参照



🔵リアルタイムファサード
好きなクラスをファサードとして使用できる。
...ファサードの利便性をより簡単に利用できる方法

🟢リアルタイムファサードの使い方

use Facades\App\Contracts\Publisher;　　名前空間の前にFacadesを付ける

class Podcast extends Model
{
    //ポッドキャストを公開するメソッド
    public function publish()
    {
        Publisher::publish($this);　　インスタンスメソッドのpublishを、静的メソッドのように呼び出せる
    }
}

※通常のクラスとしてPublisherを呼び出す場合
use App\Contracts\Publisher;

class Podcast extends Model
{
    public function publish(Publisher $publisher)　　Publisherのインスタンスを渡す必要がある
    {
        $publisher->publish($this);
    }
}

🟢通常のファサードとの違い

ー　Facadeクラス基底としたクラスの実装
・ファサードとして使用したいクラスの場合、Facadeクラス基底としたクラスで、サービスコンテナで依存解決する処理を持つメソッドを定義する必要がある。
⇒ガイドのファサードの仕組みを参照

・リアルタイムファサードの場合は不要

ー　サービスコンテナへの登録
・ファサードとして使用するクラスは、事前にサービスコンテナに登録している必要がある。

・リアルタイムファサードとして使用するクラスは、事前にサービスコンテナに登録していなくてもよい。
⇒サービスコンテナは、Facadesプレフィックスの後に続くインターフェイスまたはクラス名の部分を使用して、解決するクラスの実装を動的に取得
⇒use Facades\App\Contracts\Publisher;が実行された時点で、サービスコンテナが解決をする。
⇒実際のクラスの実装を切り替えやすくなる。

🟢リアルタイムファサードのテスト
Laravelの組み込みファサードテストヘルパを使用できる。



🔵facadeのテスト
TestCaseクラスの機能により、テスト環境ではファサードはモックになる

※具体例はガイドを参考



🔵facadeと依存注入の違い
どちらもクラスやサービスにアクセスする手段

🟢テストのしやすさ
ー　依存注入
依存関係（コンストラクタやメソッドの引数）を簡単に差し替えることができて、モックやスタブを簡単に注入できる。
⇒テストしやすい

ー　ファサード
静的メソッドのように呼び出すため、モックしにくく、テスト中に振る舞いを変更しづらい。
⇒テストがしずらい場合がある。

...一般的には依存注入が推奨され、ファサードはシンプルなケースで利用される。



🔵facadeとヘルパ関数の違い
ほぼない。ヘルパ関数の多くは、対応するファサードと同じ機能を実行する。



🔵facadeの仕組み
ガイド参照
