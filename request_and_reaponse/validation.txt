https://readouble.com/laravel/9.x/ja/validation.html



🟡バリデーションエラーで起きること

🟢非同期なリクエスト
fetch API、axiosライブラリ、XHRなど、非同期でリクエストを行う場合のバリデーション

・バリデーションエラーを含むJSONレスポンスを生成する。（422も一緒に送信される。）

🟢通常のリクエスト
・直前の場所へ自動的にリダイレクトする。
・すべてのバリデーションエラーとリクエスト入力は自動的にセッションに一時保持保存される。...ガイド「フォームの再取得」
・ビューで$errors変数が常に定義され、$errors変数が常に使用可能になる。
※Bladeでは@error(特定の属性にバリデーションエラーメッセージが存在するかを判定)が使用できる。...ガイド「@errorディレクティブ」



🟡バリデーション実行

🔵エラーメッセージの取得
validateWithBag()...エラーメッセージをnamederrorbag内へ保存

$validatedData = $request->validateWithBag('post', [
    'title' => ['required', 'unique:posts', 'max:255'],
    'body' => ['required'],
]);

ガイド「バリデーションロジック」



🔵ネストしたデータの検証
ガイド「ネストした属性の注意点」



🔵nullの許容
nullを許容する属性にはnullableルールを追加する。
ガイド「オプションフィールドに対する注意」



🟡バリデーション実行後

🔵実行後の入力値の取得
validated()、safe()

ガイド「バリデーション済み入力の利用」



🔵JSONレスポンスのフォーマット
❗ネストしたエラーのキーは、ドット記法で１次元化される。

{
    "message": "The team name must be a string. (and 4 more errors)",
    "errors": {
        "team_name": [
            "The team name must be a string.",
            "The team name must be at least 1 characters."
        ],
        "authorization.role": [
            "The selected authorization.role is invalid."
        ],
        "users.0.email": [
            "The users.0.email field is required."
        ],
        "users.2.email": [
            "The users.2.email must be a valid email address."
        ]
    }
}



🟡バリデーションの実行方法
・フォームリクエスト
・validateメソッド
・Validatorファサードの使用

🔵フォームリクエスト
ガイド「フォームリクエストバリデーション」

🟢検証前にリクエストのデータを加工する
prepareForValidationメソッド...バリデーション実行前に、データの事前処理を行うために使用する。

ガイド「検証のための入力準備」

🟢検証後に実行する処理を定義
passedValidationメソッド...バリデーション成功後に実行される処理をカスタマイズするために使用する。

ガイド「検証のための入力準備」

🟢最初のバリデーション失敗で、属性の検証を停止する
protected $stopOnFirstFailure = true;　の追加

🟢エラーメッセージのカスタマイズ
messageメソッドをオーバーライドする
ガイド「エラーメッセージのカスタマイズ」

🟢属性名（:attribute）のカスタマイズ
エラーメッセージの:attributeプレースホルダーを任意の属性名に置き換えたい場合は、
attributesメソッドをオーバーライドする。

ガイド「バリデーション属性のカスタマイズ」

🟢authorizeメソッド
Policyを使用して、リクエストを処理する前にアクセス権限のチェックを行える。

ガイド「フォームリクエストの認可」

ガイド 認可：「ポリシーを使用したアクションの認可」
https://readouble.com/laravel/9.x/ja/authorization.html

❗AuthorizesRequestsトレイトのauthorizeメソッドとの使い分け

ー　フォームリクエストのauthorizeメソッド
リクエスト処理前に、アクセス権限を確認し、バリデーションと認証を同時に行う。

ー　AuthorizesRequestsトレイトのauthorizeメソッド
コントローラーのアクションが実行される前にアクセス権限を確認する



🟡エラーメッセージ
ガイド「エラーメッセージの操作」



🟡バリデーションルール
ガイド「使用可能なバリデーションルール」
・カスタムカラム名の指定
・条件付きでルールを追加する
・パスワードのバリデーション
・配列のバリデーション
・ファイルのバリデーション

🔵カスタムバリデーション
ガイド「カスタムバリデーションルール」

🟢バリデーション対象のデータにアクセスする
DataAwareRuleインターフェースを実装する

バリデーションルールが他のフィールド値に依存する場合などに有用

ガイド「追加データへのアクセス」

🟢Validatorにアクセスする
ValidatorAwareRuleインターフェースを実装する

別のバリデーションルールが実行された結果を取得したいときなどに有用

こっちでもバリデーション対象のデータにアクセスするできる？？

ガイド「追加データへのアクセス」

🟢ルールに直接バリデーションの処理を書く
ガイド「クロージャの使用」



🔵空文字に対してもバリデーションを実行する（required以外）
デフォルトでは、バリデーションされる属性が存在しないか、空の文字列が含まれている場合、
カスタムルールを含む通常のバリデーションルールは実行されない。

ガイド「暗黙のルール」
