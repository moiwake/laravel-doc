
それから、bootstrap/app.phpスクリプトから、Laravelアプリケーションのインスタンスを取得する。

Laravel自身の最初のアクションは、アプリケーション／サービスコンテナのインスタンスを生成すること。



🟡index.php

PHPフレームワークのエントリーポイント
...アプリケーションに対するリクエストは、すべてpublic/index.phpファイルが入り口になる。

すべてのリクエストがindex.phpに渡される
...Webサーバ(Apache/Nginx)の設定により、すべてのリクエストをこのファイルへ渡している。


以下の処理が、HTTPリクエストが送信されるたびに実行される。
⇒アプリケーションのコア部分が再度実行され、リクエストごとに新しいインスタンスが生成されることで、各リクエストは独立して処理される。
⇒Laravelアプリケーションがリクエストごとに必要な初期化や設定を行い、適切なレスポンスを生成できるようになる。


🔵LARAVEL_START定義
define('LARAVEL_START', microtime(true));
フレームワークの起動時刻を記録するための定数を定義

🔵Auto Loader登録
require __DIR__.'/../vendor/autoload.php';
Composerによって生成されたオートローダーを登録
⇒アプリケーションのクラスを手動でロードする必要がなくなる。

🔵Frameworkの起動
$app = require_once __DIR__.'/../bootstrap/app.php';
Laravelアプリケーションを起動し、フレームワークを使用可能な状態にする。
bootstrap/app.php ファイルは、アプリケーションの基本的な設定とサービスプロバイダーの登録を行う（ブートストラップフェーズ）。

🔵Applicationの実行
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);

$response = $kernel->handle(
    $request = Illuminate\Http\Request::capture()
);
アプリケーションを実行するために、HTTPカーネルを作成し、リクエストを処理して対応するレスポンスを生成する。
Illuminate\Contracts\Http\Kernelインターフェースは、HTTPリクエストを処理する役割を果たす。

🔵Response の送信と終了処理
$response->send();
Kernelで生成されたレスポンスをクライアントのブラウザに送信する。

$kernel->terminate($request, $response);
アプリケーションの終了処理（データベース接続の終了など）を行う。
