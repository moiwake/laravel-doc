https://readouble.com/laravel/9https://readouble.com/laravel/9.x/ja/providers.html

🟡サービスプロバイダーとは
①サービスコンテナにサービスを登録するクラス（依存性注入）
②起動前に必要なタスクをの実行（初期化）

※ほとんどのプロバイダは、すべてのリクエストで必ずロードされるとは限らず、実際に必要なときにのみロードされる。（「遅延」プロバイダ）



🔵サービスとは

Laravelアプリケーション内で提供される特定の役割や機能を担当するクラスやコンポーネント
⇒サービスコンテナに登録することで、アプリケーション全体で利用可能になる。

例）Databaseサービス（DB::table('users')）や、Mailサービス

ー　シングルトンインスタンス
サービスは通常、シングルトンとしてコンテナに登録される。
⇒アプリケーション内で一度だけインスタンスが作成され、その後は同じインスタンスが再利用される。
⇒リソースの効率的な利用や依存関係の一貫性が確保される。



🔵サービスコンテナ
クラス間の依存を管理する強力な管理ツール
⇒コンテナにクラスやサービスを登録すると、依存性注入による依存性の解決を自動的に行える

⇒　🟡service_container



🔵サービスプロバイダーのロード
アプリケーションのブートストラップフェーズで行われる処理の１つに、サービスプロバイダーの登録・起動がある。

Illuminate/Foundation/Http/Kernel.phpのbootstrapメソッドで、
$bootstrappersに含まれるブートストラップクラスのbootstrapメソッドが実行される　⇒　🟡bootstrap　🔵実行

$bootstrappersには、\Illuminate\Foundation\Bootstrap\RegisterProviders::classが含まれる。



🔵サービスの登録
RegisterProvidersクラスのbootstrapメソッドによって、config/app.phpのproviders配列に含まれるサービスが
サービスコンテナに登録される。

ー　Illuminate/Foundation/Bootstrap/RegisterProviders.php

public function bootstrap(Application $app)
{
    $app->registerConfiguredProviders();
}

ー　Illuminate/Foundation/Application.php

public function registerConfiguredProviders()
{
    $providers = Collection::make($this->config['app.providers'])　　config/app.phpのプロバイダーを取得
                    ->partition(function ($provider) {
                        return strpos($provider, 'Illuminate\\') === 0;
                    });

    $providers->splice(1, 0, [$this->make(PackageManifest::class)->providers()]);

    (new ProviderRepository($this, new Filesystem, $this->getCachedServicesPath()))
                ->load($providers->collapse()->toArray());　　サービスを登録（各サービスプロバイダークラスのregisterメソッドを呼び出している）
}



🔵サービスの起動
ー　Illuminate/Foundation/Bootstrap/BootProviders.php
public function bootstrap(Application $app)
{
    $app->boot();
}



🔵サービスプロバイダーの定義
https://readouble.com/laravel/9https://readouble.com/laravel/9.x/ja/providers.html
サービスプロバイダの記述

ー　サービスのバインド（registerメソッド）
サービスコンテナにクラスやサービスを登録すること

public function register()
{
    $this->app->bind(SomeClass::class, function ($app) {
        return new SomeClass();
    });
}

ー　初期化処理の定義（bootメソッド）
boot メソッドは、サービスプロバイダーが登録され、サービスコンテナにサービスがバインドされた後に呼び出されるメソッド

データベースのマイグレーションの実行、ルートの登録、イベントの購読、様々な初期化処理など、
アプリケーションが起動する前に実行されるべきタスクを定義する。



🟢サービスの利用
appファサードやコンテナのmakeメソッドを使用して、サービスコンテナにアクセスし、インスタンスを取得する

$instance = app(SomeClass::class);
$dependency = app(SomeDependency::class);
$instance->someMethod($dependency);
