https://readouble.com/laravel/9.x/ja/eloquent-resources.html



🟡APIリソース
モデルなどから取得したデータをJSON形式に変換し、APIのレスポンスを構築する。
APIのレスポンス用にデータを整形してカスタマイズすることができる。



🔵Resourceクラスの作成
※Illuminate\Http\Resources\Json\JsonResourceクラスを拡張する

ガイド「リソースの生成」



🔵Resourceクラスの定義

🟢toArrayメソッド
JSONへ変換するため、toArrayメソッドを必ず定義する。

例）
public function toArray($request)
{
    return [
        'id' => $this->id,
        'name' => $this->name,
        'created_at' => $this->created_at,
        'updated_at' => $this->updated_at,
    ];
}

⇒JSONレスポンス
{
    "id": 1,
    "name": "Example Name",
    "created_at": "2022-02-04T12:34:56.000000Z",
    "updated_at": "2022-02-04T18:45:12.000000Z"
}

🟢Resourceクラスの$this
Resourceクラスの$thisは、コンストラクタに渡したモデルのデータが入っている。。。？？？
⇒$thisからモデルのプロパティを参照できる（例：$this->id）



🟡コレクションのレスポンス

コレクションやページネーションのJSONレスポンスを整形する方法

①Resourceクラスのcollectionメソッド
②Collectionクラス

Resourceクラスのcollection
ー　メリット
・簡潔でわかりやすい
・一つのクラスで独立していて、結合性が低い

ー　デメリット
コレクションとともに返す必要のあるメタデータ（追加や補足の情報）があっても追加できない。
⇒Collectionクラスを利用する。

※Resourceクラスでも、additional()を使用すれば、呼び出し側でメタデータを追加できる。



🔵collectionメソッド
Resourceクラスのcollectionメソッド

例）UserResource::collection(User::all())

ー　メリット
・簡潔でわかりやすい
・一つのクラスで独立していて、結合性が低い

ー　デメリット
コレクションとともに返す必要のあるメタデータ（追加や補足の情報）があっても追加できない。
⇒Collectionクラスを利用する。



🔵Collectionクラス
リソースコレクションクラス
Illuminate\Http\Resources\Json\ResourceCollectionを拡張する。

例）new UserCollection(User::all())

🟢仕組み
Collectionクラスのインスタンスを生成すると、
対応するResourceクラスのtoArrayメソッドで定義した構造を持つコレクションと、メタデータを持ったJSONレスポンスを返す。
⇒Collectionクラスのインスタンスを生成する中で、対応するResourceクラスのcollection()を呼び出している。

※ResourceCollectionクラスで、CollectsResourcesクラスのcollectResource()を呼び出し、
　collects()で対応するResourceクラスを取得している。
https://github.com/laravel/framework/blob/6.x/src/Illuminate/Http/Resources/Json/ResourceCollection.php

🟢定義方法
例）
public function toArray($request)
{
    return [
        'data' => $this->collection,　　Resourceクラスで整形したJSONレスポンス用のコレクション
        'links' => [
            'self' => 'link-value',　　　追加のメタデータ
        ],
    ];
}

⇒JSONレスポンス
{
    "data": [
        { "id": 1, "name": "Item 1", /* other attributes */ },
        { "id": 2, "name": "Item 2", /* other attributes */ },
        /* ... */
    ],
    "links": {
        "self": "link-value"
    }
}

ガイド「リソースコレクション」

❗クラス名の命名規則：Resourceクラスの名前と対応させる。
例）UserResourceを実装　⇒　UserCollection　もしくは　UserResourceCollection

※Resourceクラスの名前をカスタマイズしたいとき
public $collects = 〇〇::class;

🟢整形したコレクションへのアクセス
$this->collection
コレクションの各アイテムを、それぞれリソースクラスにマッピングして整形した結果が代入されている。

🟢データの並び順
リソースコレクションは、レコードのidカラムを昇順にして並び替える。

元のコレクションの順番のままにして返したいときは、以下の設定をする。
public $preserveKeys = true;

🟢JSONデータのラップ
JSON形式に変換されるとき、外側はdataキーでラップされる。

ー　キーをカスタマイズしたいとき
public static $wrap = キー名の文字列;

ー　ラップしたくないとき
ガイド「データのラップ」後半

🟢Resourceクラスのレスポンスに、リソースコレクションを含める

例）リレーションのデータを含めたいとき
class PostResource extends JsonResource
{
    public function toArray($request)
    {
        return [
            'id' => $this->id,
            'title' => $this->title,
            'comments' => new CommentsCollection($this->comments),　リレーションのデータを返すリソースコレクション
        ];
    }
}

class CommentsCollection extends ResourceCollection
{
    public function toArray($request)
    {
        return ['data' => $this->collection]; ※キーはdataでなくともOK
    }
}

⇒Resourceクラスを呼び出したときのJSONレスポンス
{
    "id": 1,
    "title": "Example Post",
    "comments": {
        "data": [
            { "id": 1, "text": "First Comment", /* other comment attributes */ },
            { "id": 2, "text": "Second Comment", /* other comment attributes */ },
            /* ... */
        ]
    }
}

ー　このResourceクラスをコレクションにしたいとき
このResourceクラスのリソースコレクションを作成する。

例）PostCollectionを作成する
class PostCollection extends ResourceCollection
{
    public function toArray($request)
    {
        return [
    　　　　　'data' => $this->collection,
            'links' => [
                'self' => 'link-value',　　　追加のメタデータ
            ],
　　    ];
    }
}

⇒リソースコレクションを呼び出したときのJSONレスポンス
{
    "data": [
        {
            "id": 1,
            "title": "Example Post 1",
            "comments": {
                "data": [
                    { "id": 1, "text": "First Comment", /* other comment attributes */ },
                    { "id": 2, "text": "Second Comment", /* other comment attributes */ },
                    /* ... */
                ]
            }
        },
        {
            "id": 2,
            "title": "Example Post 2",
            "comments": {
                "data": [
                    { "id": 3, "text": "Third Comment", /* other comment attributes */ },
                    { "id": 4, "text": "Fourth Comment", /* other comment attributes */ },
                    /* ... */
                ]
            }
        },
        /* ... */
    ],
    "links": {
        "self": "link-value"
    }
}

🟢親クラスのリソースコレクションを利用する

public function toArray($request)
{
    return parent::toArray($request);　　親の変換ロジックを利用したい
}

ー　メタデータを追加する
with()でメタデータを追加できる。

public function with($request)
{
    return [
        'meta' => [
            'key' => 'value',
        ],
    ];
}



🟡ページネーションのレスポンス
ペジネータインスタンスを、Resourceクラスのcollectionメソッド・リソースコレクションに渡すことができる。

例）return new UserCollection(User::paginate());

⇒JSONレスポンス
{
    "data": [
        {
            "id": 1,
            "name": "Eladio Schroeder Sr.",
            "email": "therese28@example.com"
        },
        {
            "id": 2,
            "name": "Liliana Mayert",
            "email": "evandervort@example.com"
        }
    ],
    "links":{
        "first": "http://example.com/pagination?page=1",
        "last": "http://example.com/pagination?page=1",
        "prev": null,
        "next": null
    },
    "meta":{
        "current_page": 1,
        "from": 1,
        "last_page": 1,
        "path": "http://example.com/pagination",
        "per_page": 15,
        "to": 10,
        "total": 10
    }
}

❗linksやmetaをtoArrayメソッド内で定義していた場合、オーバーライドされるのではなく、
ページネーションのデータにマージされる。



❗リソースはいろいろなAPIで使用する可能性があるため、条件を付けると、不要なレスポンスを返さないようにできる！
🟡条件分岐

🔵条件を満たすときのみレスポンスに含めるプロパティ
when()

例）'secret' => $this->when($request->user()->isAdmin(), 'secret-value'),

⇒$request->user()->isAdmin()がtrueのときは'secret' => 'secret-value'を含めたレスポンスを返す。
　falseのときは、secretキー自体がレスポンスから削除される。

ー　返す値も動的にしたいとき
when()の第二引数はクロージャーにできる。

例）
'secret' => $this->when($request->user()->isAdmin(), function () {
    //////返り値を決める処理
    return 〇〇;
}),



🔵$thisが指定の属性を持っているか
whenHas()

例）$thisに入るモデルのデータがname属性を持っているとき、nameキーをレスポンスに含める。
'name' => $this->whenHas('name')



🔵$thisの指定の属性の値がNULLでないときのみ
whenNotNull

例）$thisに入るモデルのデータのname属性の値が、NULLではないとき、nameキーをレスポンスに含める。
'name' => $this->whenNotNull($this->name),



🔵複数条件をまとめて書く

ー　同条件で複数のプロパティをレスポンスを含める

例）$request->user()->isAdmin()がtrueのとき、第二引数の２つのプロパティがレスポンスに含まれる
$this->mergeWhen($request->user()->isAdmin(), [
    'first-secret' => 'value',
    'second-secret' => 'value',
]),

※配列がレスポンスに含まれるわけではない

ー　レスポンス自体に条件づけする

例）$request->user()->isAdmin()がtureのとき、$request->user()->isEditor()がtrueのときで、
　　リソースが返すJSONレスポンスを変えたいとき

return $this->mergeWhen($request->user()->isAdmin(), [
    'isAdmin' => true,
])->mergeWhen($request->user()->isEditor(), [
    'isEditor' => true,
]);

※if文でも書き換えができるが、複雑でない場合はmergeWhenの方が見やすいため、要検討

❗mergeWhenは、文字列キーと数値キーが混在する配列内では使用しない。
また、順番に並べられていない数値キーを持つ配列内では使用しない。



🔵リレーションに関する条件づけ

🟢リレーションがロードされているときのみ
whenLoaded()
リレーションがすでにモデルにロードされているときのみ、レスポンスにリレーションを含める。

ガイド「条件付きリレーション」

🟢リレーションの件数がロードされているときのみ
whenCounted()
loadCount（関連するモデルの件数をデータにロードできる）で件数をロードしているときのみ、レスポンスにリレーションを含める。

ガイド「条件付きリレーションカウント」

🟢中間テーブルがロードされているときのみ
whenPivotLoaded()
中間テーブルがロードされているときのみ、レスポンスに指定のデータをレスポンスに含める。

ガイド「条件付きピボット情報」



🟡リソースやリソースコレクションのレスポンス自体を整形する

ー　メタデータの追加
additional()
リソースやリソースコレクションを呼び出したあとから、メタデータを追加する。

例）
return (new UserCollection(User::all()->load('roles')))
                ->additional(['meta' => [
                    'key' => 'value',
                ]]);



🟡HTTPレスポンスをカスタマイズする（ヘッダーの追加など）
リソースやリソースコレクションを使っているときに、HTTPレスポンスをカスタマイズしたいとき

・ヘッダー追加
・ステータスコードの変更
・クッキーの追加
など

①response()をチェーンする
②Resourceクラスで、withResponseメソッドを定義する

🔵response()をチェーンする
例）
return (new UserResource(User::find(1)))
            ->response()
            ->header('X-Value', 'True');



🔵Resourceクラスで、withResponseメソッドを定義する
例）
public function withResponse($request, $response)
{
    $response->header('X-Value', 'True');
}
