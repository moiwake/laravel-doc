https://readouble.com/laravel/9.x/ja/routing.html
https://laravel.com/api/9.x/Illuminate/Routing/Route.html
https://laravel.com/api/9.x/Illuminate/Routing/Router.html

❗ルート定義は、定義の順番が決まっていることが多い



🟡route
routesディレクトリにあるルートファイルは、App\Providers\RouteServiceProviderにより、自動的に読み込まれる。



🔵web.php
Webインターフェイス用のルートを定義

ここルートには、セッション状態やCSRF保護などの機能を提供するwebミドルウェアグループが割り当てられる。



🔵api.php
ここのルートはステートレスであり、apiミドルウェアグループが割り当てられる。

RouteServiceProviderによってルートグループ内にネストされる。
⇒グルーピングされた一連のルートに対して、共通のミドルウェア、プレフィックス、名前空間、ドメインなどの設定を適用できる。

api.phpに定義されたルートも、RouteServiceProviderによってグルーピングされる。
⇒グループ内では「/api」プレフィックス（URIの頭に付く）、api ミドルウェア、指定コントローラの名前空間が適用される。

※RouteServiceProviderクラスを変更することにより、プレフィックスおよびその他のルートグループオプションを変更できる。



🔵resource
コントローラのガイド「リソースコントローラ」
https://readouble.com/laravel/9.x/ja/controllers.html



🔵ルーターメソッド
※詳細はガイド参照

ー　複数のHTTP動詞(getやpostなど)に応答するルートを登録
anyやmatchメソッドを使用する

ー　引数にクロージャーを渡せる

ー　リダイレクト
redirectメソッドを使用

ー　ビューのみを返すページのルート
viewメソッドを使用



🔵ルートの確認

ー　指定したURIで始まるルートのみを表示
php artisan route:list --path=api

ー　各ルートへ割り付けたルートミドルウェアも表示
php artisan route:list -v

ー　サードパーティーのパッケージが定義したルートを非表示
php artisan route:list --except-vendor

ー　サードパーティーのパッケージが定義したルートだけを表示
php artisan route:list --only-vendor



🔵ルートパラメータ

🟢オプションパラメータ
存在するときと、しないときがあるパラメータを付与したいときに使用

Route::get('events/{name?}', [EventController::class, 'index'])

※nameのデフォルト値はnull
※デフォルト値を変更したいときはdefaultメソッドを使用（このメソッド本当に存在する？）

Route::get('events/{name?}', [EventController::class, 'index'])
　　->default('name', 'defaultValue');

🟢パラメータの正規表現

Route::get('events/{name?}', [EventController::class, 'index'])
　　->where('name', '[A-Za-z]+')

※詳細はガイド参照

🟢パラメータに「/」を含めたいとき
パラメータにパスを入れたいときなど
※ガイドの「エンコードされたスラッシュ」を参照

🟢ID以外をパラメーターにする
ガイドの「キーのカスタマイズ」・「カスタムキーとスコープ」を参照

🟢パラメータをENUMの値にする
ENUMに含まれる値がパラメータとして渡されたときだけ呼び出される。（含まれないときは404）
※ガイドの「Enumバインディング」を参照



🔵パラメータのIDに対応するレコードを取得する
ルートモデル結合：モデルインスタンスをルートに自動的に注入できる。

例）コントローラーで、パラメーターのIDに対応するUserモデルのインスタンスを取得できる。

use App\Http\Controllers\UserController;
use App\Models\User;

// ルート
Route::get('/users/{user}', [UserController::class, 'show']);

// コントローラ
public function show(User $user)
{
    return view('user.profile', ['user' => $user]);
}

⇒$user変数はUserモデルとしてタイプヒントし、変数名は{user}URIセグメントと一致させる、

※一致するモデルインスタンスがDBに見つからない場合、404を自動生成する。
...404ではなく、任意の挙動にしたいとき⇒ガイドの「見つからないモデルの動作をカスタマイズする」を参照

🟢ソフトデリートされたモデルを取得したいとき
withTrashed()をチェーンする

🟢取得するモデルにスコープを設定する
scopeBindings()をチェーンする

例）親モデル：User　子モデル：Post

Route::get('/users/{user}/posts/{post}', function (User $user, Post $post) {
    //
})->scopeBindings([
    'user' => function ($value) {
        return User::where('status', 'active')->where('id', $value)->firstOrFail();
    },
]);

🟢取得するモデルのスコープの設定を無効にする
withoutScopedBindingsメソッドを使用

※グローバルスコープが設定されているモデルで、そのスコープの適用を無効にしたいときなどに有用

🟢取得するモデルを任意に設定する
デフォルトだと、{user}とすれば、Userモデルにバインディングされる
⇒パラメーター名とバインディング先のモデルが対応している必要がある

パラメーター名や、バインディング先のモデルを任意に設定できる
⇒詳細はガイドの「明示的な結合」を参照

🟢所得するモデルのロジックをカスタマイズする
通常、パラメーター値とカラム（IDがデフォルト）をwhereメソッドで検索する

そのロジックをカスタマイズできる

詳細はガイドの「結合解決ロジックのカスタマイズ」を参照



🔵ルートグループ
グルーピングされた一連のルートに対して、共通のミドルウェア、プレフィックス、名前空間、ドメイン、where条件などの設定や条件を適用できる。

※グループをネストすることもできる

ー　コントローラーごとにグルーピングすることも可能
※ガイド「ルートグループのコントローラー」



🔵サブドメインのルーティング

サブドメイン：メインドメインにつける識別子
⇒異なる機能ごとにドメインを変化させるときに利用

メインドメイン：example.com
サブドメイン：blog・shop

blog.example.com/〇〇/〇〇
shop.example.com/〇〇/〇〇

※ガイド「サブドメインルーティング」



🔵ルート名のプレフィックス
例）ルート名usersにプレフィックスadminをつける
admin.users

※ガイド「ルート名のプレフィックス」



🔵404のときのルート定義
Route::fallback

※ガイド「フォールバックルート」



🔵レート制限
アプリケーションに対する一定の期間内のリクエストの数や頻度を制御する
⇒サーバーへの負荷を軽減し、悪意のある攻撃や不正利用から保護するセキュリティ手段の一つ

※ガイド「レート制限」



🔵CORS設定（別のアプリ間の通信の許可）
異なるオリジン（ドメイン、プロトコル、ポートの組み合わせが異なる）からのリソースにアクセスできるようにするための設定
...この設定をしないと、セキュリティにために通信が制限される

例）フロントのアプリから、APIのアプリにアクセスする

設定はサーバーサイド側で行う
...fruitcake/laravel-corsパッケージを使用すると簡単に設定できる
...設定ファイル：config/cors.php

この設定をすると、ヘッダーに以下のような項目が追加される。
・Access-Control-Allow-Origin: https://example.com
・Access-Control-Allow-Credentials: true

※シニアのAPIには、fruitcake/laravel-corsパッケージは入っているが、config/cors.phpがない。なぜ？？



🔵ルートのキャッシュ（ルート解決を高速化）　　❗クロージャーが使えなくなるので、使用はできる場合は限られる
php artisan route:cache

【メリット】
高速なルート解決
パフォーマンス向上

【デメリット】
クロージャの不可：
クロージャが含まれるルート（例: groupメソッド）はキャッシュできない。
⇒キャッシュを有効にすると、これらのクロージャが無視される。

ルート変更の遅延：
ルートをキャッシュするとその後の変更が反映されないままになる。
⇒キャッシュが有効な間は新しいルートが反映されないため、ルート変更が即座に反映される必要がある場合に問題となる。

デバッグの複雑性：
ルートのキャッシュが有効な場合、デバッグや新しいルートの追加が少し複雑になる。
⇒php artisan route:clearを実行してキャッシュをクリアする必要がある。



🔵URLをセキュアにする
名前付きルートにセキュアな署名を追加することで、URLが変更されていないかを検証できる。
...例）メールなどで公に共有するURLが、外部からの不正な変更を受け付けないようにする。

ガイド「署名付きURL」



🔵URLを文字列で取得
https://readouble.com/laravel/9.x/ja/urls.html
ガイド「名前付きルートのURL」、「現在のURLへのアクセス」



🔵URLのパラメータのデフォルト値
routeヘルパを呼び出すごとに、パラメータを指定する必要がないように、デフォルト値を設定できる。
https://readouble.com/laravel/9.x/ja/urls.html
ガイド「デフォルト値」



🔵現在のリクエストが指定のルートにルーティングされたかどうかを判定
ガイド「現在のルートの検査」



🔵現在のリクエスト情報を取得
例）Route::current()->getName();　　現在のルート名を取得

※ガイド「現在のルートへのアクセス」...ガイドに載っていないメソッドもいろいろありそう。
